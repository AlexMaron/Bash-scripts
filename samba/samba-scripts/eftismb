#!/bin/bash
#
# This script added features to simply create linux user with random or selected password, also adds samba user with the same password as linux user, and adds als permissions to selected folders.

usage() {
  echo "Usage: ${basename} [-n USER_NAME] [-g GROUP_NAME] [-c 'COMMENT ...'] -dv"
  echo "   -n USER_NAME		Linux user name."
  echo "   -g GROUP_NAME		Linux group name."
  echo "   -c COMMENT ...	Comments about linux user such IP address, position and full name. Multiple comments must be quoited"
  echo "   -d			Dry run mode. Only display the command that would have been executed and exit."
  echo "   -a ./folder		Add ACL permissions on PATH folder/file to current linux user."
  echo "   -p rwx r-x rw-	"
  echo "   -v			Verbose mode. Display all used variables."
}

acl_true() {
 _ACL='true'
}

# Set ACL permissions for selected folder.
acl_permission() {
  echo -e "\e[4mRunning script for adding ACL permissions...${_BASH_COLOR}"
  echo -ne "${_HEADER_COLOR}ACL status before updating permissions:${_BASH_COLOR}"
  getfacl ${_PATH} | sed 's/^/    /'
  echo -e "\e[4mDisplaying launched ACL adding command${_BASH_COLOR}:"
  echo -e "${_HEADER_COLOR}setfacl -m u:${USER_NAME}:${PERMISSION} ${_PATH}${_BASH_COLOR}"
  echo ''
  if [[ ! "$DRY_RUN" == true ]]
  then
    setfacl -m u:"${USER_NAME}":"${PERMISSION}" ${_PATH}
    echo -e "\t\t${_LDELIMITER}" >> /var/log/eftismb.log
    echo -e "\t\tAdding ACL permissions for ${USER_NAME}" >> /var/log/eftismb.log
    echo -e "\t\tPerm-on keys:\t${PERMISSION}" >> /var/log/eftismb.log
    echo -e "\t\tSelected path:\t${_PATH}" >> /var/log/eftismb.log
    echo -e "\t\t${_LDELIMITER}" >> /var/log/eftismb.log
  fi
  echo -ne "${_HEADER_COLOR}ACL status after updating permissions:${_BASH_COLOR}"
  getfacl ${_PATH} | sed "/${USER_NAME}/ s/^/`printf "\033[1;032m+++ \033[0m"`/; /${USER_NAME}/! s/^/    /"
}

# Colors
_HEADER_COLOR="\e[1;96m"
_ECHO_COLOR="\e[33m"
_GREEN="\e[92m"
_RED="\e[91m"
_BASH_COLOR="\e[0m"

# Line deliminer
_LDELIMITER='============================================='

# Check root privileges.
if [[ ${UID} -ne 0 ]]
then
  echo 'Please run script with sudo privileges or as root.'
  exit 1
fi

# Define options.
while getopts n:g:c:dva:p:P:r OPTION
do
  case ${OPTION} in
    n) USER_NAME="${OPTARG}" ;;
    g) GROUP_NAME="-G ${OPTARG}" ;;
    P) _PASSWORD_MODE="${OPTARG}" ;; 
    d) DRY_RUN='true' ;;
    v) VERBOSE='true' ;;
    p) PERMISSION="${OPTARG}"; acl_true ;;
    a) _PATH="${OPTARG}" ;;
    c) COMMENT="${OPTARG}" ;;
    r) _REMOVE='true' ;;
    ?) usage >&2; exit 1
  esac
done

# If position options not specified output usage and exit with error 66.
if [[ "${#}" -lt 1 ]]
then
  usage
  exit 66
fi

shift $(( OPTIND - 1 ))


#3
#var data= [
#	{ id: 1, name: 'foo 1', description: 'description 1'}
#	{ id: 3, name: 'foo 3', description: 'description 3'}
#];


EXIT_STATUS='0'

# Useradd variable.
_USERADD="useradd -M -g smbuser ${GROUP_NAME} -s /sbin/nologin ${USER_NAME}"


if [[ "${DRY_RUN}" == 'true' ]] # Display command echo output. 
then
  echo ''
  echo -e "${_HEADER_COLOR}= Selected dry run mode =${_BASH_COLOR}" | cowsay
  echo ''
  echo -e "${_ECHO_COLOR}${_USERADD}"
  echo "Path for adding acl permission: ${_PATH}"
  echo -e "Permission keys: ${PERMISSION}${_BASH_COLOR}"
  echo ''
  echo "Password mode: ${_PASSWORD_MODE}"

  # Sets password same as username.
  if [[ "${_PASSWORD_MODE}" == 'same' ]]
  then
    _PASSWORD="${USER_NAME}"
    echo "Password: ${_PASSWORD}"
    echo ''
  fi

  # Sets random generation password.
  if [[ "${_PASSWORD_MODE}" == 'random' ]]
  then
      _URANDOM_STRING="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w7 | head -n1)"
      _SPECIAL_SYMBOL="$(echo '!@#$%^&*~-_=.' | fold -w1 | shuf | head -c1)"
      _PASSWORD="$(echo ${_URANDOM_STRING}${_SPECIAL_SYMBOL})"
      echo "Password: ${_PASSWORD}"
      echo ''
  fi

  # Display user remove output.
  if [[ "${REMOVE}" == 'true' ]]
  then
    echo "${USER_NAME}" would be removed.
  fi

  # Display 
  if [[ "${?}" -eq 0 ]] && [[ "${_ACL}" == 'true' ]]
  then
    acl_permission
  fi

else # If dry mode does not select run script.
  if [[ "${_REMOVE}" != 'true' ]] # Wrap for not adding user if -r option is specified. 
  then
  
  # Display variables.
  echo ''
  echo -e "${_ECHO_COLOR}${_USERADD}"
  echo "Path for adding acl permission: ${_PATH}"
  echo -e "Permission keys: ${PERMISSION}${_BASH_COLOR}"
  echo ''
  echo "Password mode: ${_PASSWORD_MODE}"

  # Sets password same as username.
  if [[ "${_PASSWORD_MODE}" == 'same' ]]
  then
    _PASSWORD="${USER_NAME}"
    echo "Password: ${_PASSWORD}"
    echo ''
  fi

  # Run user adding variable.
  ${_USERADD} &> /dev/null
    
    # If -s option specified run password generation mode and commands for adding password for user.
    if [[ "${_PASSWORD_MODE}" == 'same' ]] # If -s option have "same" variable input password equals username.
    then
      echo ${USER_NAME} | passwd --stdin ${USER_NAME}
      printf "${_USER_NAME}\n${_USER_NAME}\n" | smbpasswd -a -s ${USER_NAME}
    fi

    if [[ "${_PASSWORD_MODE}" == 'random' ]] # If -s option have "random" variable generate random password.
    then
      _URANDOM_STRING="$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w7 | head -n1)"
      _SPECIAL_SYMBOL="$(echo "!@#$%^&*~-_=." | fold -w1 | head -c1)"
      _PASSWORD="${_URANDOM_STRING}${_SPECIAL_SYMBOL}"
      echo "Password: ${_PASSWORD}"
      echo ''
      echo "${_PASSWORD}" | passwd --stdin "${USER_NAME}"
      printf "${_PASSWORD}\n${_PASSWORD}\n" | smbpasswd -a -s ${USER_NAME}
    fi
    
    # Check exit status. If status not equals zero then display message about it.
    if [[ "${EXIT_STATUS}" -ne 0 ]]
    then
      echo "Failed to add linux user" | cowsay -f head-in
      echo "Exit status: ${EXIT_STATUS}"
    fi

    # Log output.
    echo -e "$(date +"%d %m %T")\tAdd linux user:\t${USER_NAME}" >> /var/log/eftismb.log
    echo -e "\t\t${_LDELIMITER}" >> /var/log/eftismb.log
    echo -e "\t\tPassword:\t${_PASSWORD}" >> /var/log/eftismb.log
    echo -e "\t\tGroup:\t\t${GROUP_NAME}" | sed 's/-G //' >> /var/log/eftismb.log
    echo -e "\t\tComments:\t${COMMENT}" >> /var/log/eftismb.log

  fi
  EXIT_STATUS="${?}"
  
  # If -r option is specified run user deleting commands.
  if [[ "${_REMOVE}" == 'true' ]]
  then
    echo "${USER_NAME} ${_PATH}"
    setfacl -x u:${USER_NAME} ${_PATH}
    smbpasswd -x "${USER_NAME}"
    userdel "${USER_NAME}"
    
    # Log user and ACL removing.
    echo -e "$(date +"%d %m %T")\tRemoving linux user:" >> /var/log/eftismb.log
    echo -e "\t\t${_LDELIMITER}" >> /var/log/eftismb.log
    echo -e "\t\tUsername: ${USER_NAME}" >> /var/log/eftismb.log
    echo -e "\t\tACL Path: ${_PATH}" >> /var/log/eftismb.log
    echo -e "\t\t${_LDELIMITER}" >> /var/log/eftismb.log
  fi

  # If -a option is specified and exit status is zero run adding permission function.
  if [[ "${EXIT_STATUS}" -eq 0 && "${_ACL}" == 'true' && "${_REMOVE}" != 'true' ]]
  then
    acl_permission
  fi
fi

# Verbose mode.
if [[ "${VERBOSE}" == 'true' ]]
then
  echo "Username:	${USER_NAME}"
  echo "Groupname:	${GROUP_NAME}"
  echo "Comments:	${COMMENT}"
fi

# Crutch for adding multiple comments.
sed -i '/'"${USER_NAME}"'/ s/::/'":${COMMENT}:"'/' /etc/passwd

exit ${EXIT_STATUS}
